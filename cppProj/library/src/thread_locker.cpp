#include "thread_locker.h"
#include <unistd.h>
//---------------------------------------------------------------------------
void 
ThreadLocker::acquire(unsigned int usec)
{
    while(this->__locked)
    {
        usleep(usec);
    }
    this->__locked=true;
};
//---------------------------------------------------------------------------
void
ThreadLocker::release(void)
{
    __locked=false;
}
//---------------------------------------------------------------------------
ThreadLocker::ThreadLocker(void)
{
    __locked=false;
}
//---------------------------------------------------------------------------
ThreadLocker::~ThreadLocker(void)
{
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void
ThreadSemaphore::acquire(unsigned int usec)
{
    while(this->__count==0)
    {
        usleep(usec);
    }
    this->__count--;
}
//---------------------------------------------------------------------------
void
ThreadSemaphore::release(void)
{
    this->__count++;
}
//---------------------------------------------------------------------------
ThreadSemaphore::ThreadSemaphore(unsigned int count)
{
    //limit minimum to 1
    this->__count=(count==0)?1:count;
}
//---------------------------------------------------------------------------
ThreadSemaphore::~ThreadSemaphore(void)
{
}
//---------------------------------------------------------------------------
